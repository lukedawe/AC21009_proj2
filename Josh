/* 
Task allocation:
Josh: menu, binaryToDecimal, Allow the user to select, or create, the first generation,
        saving the output of your program to a text file on disk, 
        

Luke: DecimalToBinary, 
        base code, 
        Allow the user to select different lengths of the first generation, and to select different numbers of generations to produce. 
        other rules than 30

Fergus: 
        Loading saved files, 
        Write your automata out to a text file so that you can look at the results once the program has completed. 
        Wrap the ends of your automata array around so that the right-hand end continues onto the left-hand end and vice-versa.

*/

#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include<string.h>

int checkRules();
int binaryToInteger();
int customParent();
int saveOutput();
void printArray();

bool validateBinaryInput(int input){
    int validInput;
    while (input != 1 && input != 0){
        printf("Please enter a valid input");
        scanf("%d", &validInput);
    }
    if(input == 1){
        return true;
    }
    else{
        return false;
    }
}

int generateNewGen (int generationSize, int noOfGenerations, bool customRule){

    bool chooseParentSize;
    int parent[generationSize];
    int ruleArray [8] = {0,0,0,1,1,1,1,0};
    int rule;
    int childGen [generationSize];

    if(chooseParentSize == true){  
        for(int i=0; i<generationSize; i++)
        {
            int customInput;
            printf("Please enter a '1' or '0' to add into your parent generation: \n");
            scanf("%d", &customInput); 
            if (customInput==0 || customInput==1)
            {
                parent[i] = customInput;
            }
            else
            {
                printf("Invalid input please wite '1' or '0' \n");
                i--;
            }
        }
        printf("You typed: \n");
        for(int i=0; i<generationSize; i++)
        {
            printf("%d", parent[i]);
        }
        printf("\n");
        printf("\n");
    }

    if (customRule == true){
        for(int i=0; i<8; i++){
            int input;
            printf("Please enter a '1' or '0' to add your custom rule \n");
            scanf("%d", &input); 
            if (input==0 || input==1){
                ruleArray[i] = input;
            }
            else{
                printf("Invalid input please wite '1' or '0' \n");
                i--;
            }
        }
    }
    
    // we will have to add in the custom rule extension here
    
    char OutputFile [] = "big_man_big_van.txt";
    FILE *fp;
    fp = fopen(OutputFile,"w");
    for (int c = 0; c < noOfGenerations; c++){
        for(int i = 0; i < generationSize; i++){
            rule = checkRules(parent, i, generationSize);
            childGen[i] = ruleArray[rule];
        }
        if(parent == NULL){
                printf("Current generation is null");
                return 0;
        }
        else{
            if (fp != NULL){
                for(int p = 0; p < generationSize; p++){
                            fprintf(fp, "%d", parent[p]);
                  
                }
                fprintf(fp, "\n");
            }
            else{
                printf("File did not open");
            }
        }
        printArray(generationSize, parent);
        memcpy(parent, childGen, sizeof(parent));
    }
    fclose(fp);
}

int intToBinary(){
    int number;
    int remainder;
    int binary[8];
    int counter = 0;
    do{
        printf("Please enter an integer\n");
        scanf("%d", &number);
    }while(number > 256 || number < 0);
    remainder = number;
    for (int i = 128; i>0 ; i=i/2){
        if (remainder >= i){
            printf("1");
            binary[counter] = 1;
            remainder = remainder % i;
        }
        else{
            printf("0");
            binary[counter] = 0;
        }
        counter ++;
    }
    return 0;
}


int indexRight(int index, int generationSize){
    if(index == generationSize-1){
        return 0;
    }
     else{
        return index+1;
    }
}

int indexLeft(int index, int generationSize){
    if(index == 0){
        return generationSize-1;
    }
    else{
        return index-1;
    }
}

int checkRules(int parentGen [], int i, int generationSize){
    if(parentGen == NULL){
        printf("error, null parent generation");
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 1){
        return 0;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 0){
        return 1;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 1){
        return 2;
    }
    if(parentGen[indexLeft(i,generationSize)] == 1 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 0){
        return 3;
    }   
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 1){
        return 4;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 1 && parentGen[indexRight(i,generationSize)] == 0){
        return 5;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 1){
        return 6;
    }
    if(parentGen[indexLeft(i,generationSize)] == 0 && parentGen[i] == 0 && parentGen[indexRight(i,generationSize)] == 0){
        return 7;
    }
}

void printArray(int generationSize, int currentGen []){
    if(currentGen == NULL){
            printf("Current generation is null");
            return;
        }
    for(int i = 0; i < generationSize; i++){
        printf("%d", currentGen[i]);
    }
    printf("\n");
}

int askNoOfGenerations(){
    int noOfGenerations;
    printf("Please enter the number of generations you would like to produce \n");
    scanf("%d", &noOfGenerations); 
    return noOfGenerations;
}


int main (void)
{
    int option;
    printf("\n");
    printf("        Welcome to Cellular Automata\n");
    printf("------------------------------------------\n\n");

    do
    {
        printf("Please enter an option from the main menu: \n");
        printf("Main Menu\n");
        printf("1. Convert Binary to Decimal\n");
        printf("2. \n");
        printf("3. Select or Create the First Generation\n");
        printf("0. Quit.\n");
        scanf("%d",&option);

        switch(option)
        {
            case 1:
                printf("Converting binary to decimal...\n");
                binaryToInteger();
                break;

            case 2:
                printf(".\n ");
               // saveOutput();
                break;

            case 3:
                printf("Select or Create the First Generation\n");
                int genSize = customParent();
                int noOfGenerations = askNoOfGenerations();
                printf("Do you want to make a custom rule?");
                int input;
                scanf("%d", &input);
                bool customRule = validateBinaryInput(input);
                generateNewGen(genSize, noOfGenerations, customRule);
                break;

            case 0:
                printf("Goodbye!\n");
                break;

            default:
                printf("Invalid input, please enter a number between \n");
                break;
        }
    }while(option != 0);

}

int binaryToInteger()
{
    long num;
    long binaryNumber;
    long decimalNumber = 0;
    int baseMultiplier = 1;
    int remainder;

    printf("Enter a binary number\n");
    scanf("%ld", &num); 
    binaryNumber = num;

    while (num > 0)
    {
        remainder = num % 10;
        decimalNumber = decimalNumber + remainder * baseMultiplier;
        num = num / 10 ;
        baseMultiplier = baseMultiplier * 2;
    }

    printf("The Binary number is = %ld \n", binaryNumber);
    printf("Its decimal equivalent is = %ld \n", decimalNumber);

}

int customParent()
{
    int customParentGenSize;
    printf("Please enter the size of the custom parent generation you would like: \n");
    scanf("%d", &customParentGenSize); 
    return customParentGenSize;
}
